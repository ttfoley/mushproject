// autogen_config.h
// Auto-generated configuration header for microcontroller: c3
// Generated by build.py from system_definition.yaml and c3_config.yaml

#ifndef AUTOGEN_CONFIG_H
#define AUTOGEN_CONFIG_H

// === Device Identification ===
#define DEVICE_ID "c3"
#define DEVICE_DESCRIPTION "CO2/Climate sensor controller for fruiting chamber"
#define WIFI_SSID "ThomassenCondo_EXT"
#define WIFI_PASSWORD "OceanBreeze"
#define MQTT_BROKER_ADDRESS "192.168.1.17"
#define MQTT_BROKER_PORT 1883
#define MQTT_USERNAME "ttfoley"   
#define MQTT_PASSWORD "password"  
#define MQTT_CLIENT_ID "controller3"

// === Global Settings ===
#define NTP_SERVER_ADDRESS "us.pool.ntp.org"
#define NTP_UTC_OFFSET_SECONDS 0
#define NTP_UPDATE_INTERVAL_MS 3600000
#define DEBUG_I2C_SCAN_ON_STARTUP true  // Set to false for production builds

// === Timing Constants ===
#define PUBLISH_INTERVAL_MS 15000
#define WIFI_CONNECT_TIMEOUT_MS 30000
#define MQTT_CONNECT_TIMEOUT_MS 20000
#define NTP_SYNC_TIMEOUT_MS 15000
#define SENSOR_AND_STATUS_PUBLISH_INTERVAL_MS 30000  // Sensors publish every 30 seconds
#define MAX_TIME_NO_PUBLISH_MS 300000
#define STATUS_PUBLISH_INTERVAL_MS 300000  // Publish status every 5 minutes
#define MAINTENANCE_RESTART_INTERVAL_MS 604800000  // 1 week = 7 * 24 * 60 * 60 * 1000
#define PERIODIC_CHECKS_INTERVAL_MS 3600000  // 1 hour = 60 * 60 * 1000

// === FSM and Connection Configuration ===
#define MAX_WIFI_ATTEMPTS 10
#define WIFI_ATTEMPT_TIMEOUT_MS 20000
#define MAX_NTP_ATTEMPTS 5
#define NTP_ATTEMPT_TIMEOUT_MS 30000
#define MQTT_CONNECT_RETRY_INTERVAL_MS 2000
#define NTP_LOOP_UPDATE_INTERVAL_MS 60000
#define DEBUG_QUEUE_INTERVAL_MS 30000

// === Delay and Timing Constants ===
#define MQTT_RETRY_DELAY_MS 2000
#define RESTART_DELAY_MS 1000
#define MAIN_LOOP_DELAY_MS 10

// === FSM State Definitions (ADR-17, ADR-22) ===
// Note: This enum will be used by common FSM utilities
//All states in FsmUtils.h must be defined here, even if they are not used in this controller.
typedef enum {
    SETUP_HW,           // Hardware initialization (done in setup())
    CONNECT_WIFI,       // WiFi connection
    SYNC_NTP,           // NTP synchronization
    CONNECT_MQTT,       // MQTT broker connection
    PUBLISH_BOOT_STATUS, // Publish boot status (restart reason) - runs once after MQTT connection
    PROCESS_COMMANDS,   // Process actuator commands 
    READ_SENSORS,       // Read sensor values and queue for publishing
    PUBLISH_DATA,       // Publish data from publish queue
    OPERATIONAL_PERIODIC_CHECKS, // Periodic maintenance tasks
    WAIT,               // Idle state, check what needs to be done
    RESTART             // Restart the controller
} FsmState;

// === I2C Configuration ===
#define I2C_SDA_PIN 21
#define I2C_SCL_PIN 22

// === Sensor Configuration Structs ===
#include "sensors/SensorConfigs.h"  // Common sensor config structs (ADR-25)

// === Sensor Configuration Instances ===

// SCD4x CO2/Temperature/Humidity Sensor Instance  
const SCD4xConfig SCD4X_0_CONFIG = {
    .address = 0x62,  // SCD4x standard I2C address
    .c_to_f = true,
    .co2_topic = "mush/c3/sensors/fruitingchamber_scd4x-0/ppm",
    .co2_uuid = "f5baf1a2-b3c4-4d5e-6f70-8192a3b4c5e0",
    .temp_topic = "mush/c3/sensors/fruitingchamber_scd4x-0/degf",
    .temp_uuid = "06cbf1a2-b3c4-4d5e-6f70-8192a3b4c5e1",
    .humidity_topic = "mush/c3/sensors/fruitingchamber_scd4x-0/percent_rh",
    .humidity_uuid = "17dcf1a2-b3c4-4d5e-6f70-8192a3b4c5e2",
    .publish_interval_ms = SENSOR_AND_STATUS_PUBLISH_INTERVAL_MS,
    .main_loop_delay_ms = MAIN_LOOP_DELAY_MS
};

// System Info: C3_WifiUptime
#define POINT_NAME_C3_WifiUptime "C3_WifiUptime"
#define UUID_C3_WifiUptime_DATA "39e1f1a2-b3c4-4d5e-6f70-8192a3b4c5d7"
#define TOPIC_C3_WifiUptime_DATA "mush/c3/statuses/wifi_uptime"

// System Info: C3_LastRestartReason
#define POINT_NAME_C3_LastRestartReason "C3_LastRestartReason"
#define UUID_C3_LastRestartReason_DATA "4a02f1a2-b3c4-4d5e-6f70-8192a3b4c5d8"
#define TOPIC_C3_LastRestartReason_DATA "mush/c3/statuses/last_restart_reason"

#endif // AUTOGEN_CONFIG_H
