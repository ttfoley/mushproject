from collections import defaultdict
import sys
import os
import time
current_dir = os.path.dirname(os.path.abspath(__file__))
lib_path = os.path.join(current_dir, '../../common')
config_path = os.path.join(current_dir, '../config')
sys.path.append(lib_path)
from mqtt_handler import MQTTHandler
import json
from datetime import datetime
from points import Remote_Write,Remote_Read, Remote_Sensor,Virtual_Sensor
from transitions import Constraint,ConstraintGroup,Transition,TransitionsManager
from surveyor import Surveyor
from states import StateStatus,State   
transitions_files = os.path.join(config_path, 'transitions_config.json')
points_file = os.path.join(config_path, 'points.json')
surveyor = Surveyor(json.load(open(points_file)))
print(surveyor)

transitions_config = json.load(open(os.path.join(config_path, 'transitions_testing.json')))["Transitions"]
print(transitions_config["Off"]["HumidOn"])

def build_transition(start_state,end_state,transition_config):
    try:
        D= transition_config[start_state][end_state]["constraint_groups"]
    except:
        return None
    D_CGs = dict()
    for CG_name,values in D.items():
        D_CGs[CG_name] = {}
        constraints_d = []
        for ix,values in values["constraints"].items():
            def_vals = values["definition"]
            constraints_d.append(Constraint(ix,def_vals["value"],def_vals["threshold"],def_vals["comparator"],def_vals["units"],surveyor))
        D_CGs[CG_name] = ConstraintGroup(CG_name,constraints_d)

    return Transition(start_state,end_state,D_CGs)

class dummy_fsm():
    def __init__(self):
        self.current_state = "Off"
        self.state = Virtual_Sensor("Off","blah")
        self.time_in_state = Virtual_Sensor(30,"blah")

test = build_transition("Off","HumidOn",transitions_config)
test_fsm = dummy_fsm()

fsm_sensors = {"fsm":{"sensors":{"state":test_fsm.state,"time_in_state":test_fsm.time_in_state}}}
surveyor.update_layout_and_points(fsm_sensors)


test_constraint = test.constraint_groups["CG_1"].constraints[0]

print(test.active)